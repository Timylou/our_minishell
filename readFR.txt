/*
 * Changement :
 *     1. Dans structs.h
 *
 * Raison du changement :
 *     1. L'ancienne structure t_shell ne contenait pas les champs nécessaires
 *        pour gérer l'exécution des processus enfants.
 *     2. En particulier, il manquait un tableau de PID pour les processus forkés,
 *        ce qui compliquait la gestion correcte des signaux et des statuts de sortie.
 *     3. Pour pouvoir attendre tous les enfants avec waitpid() et mettre à jour $?,
 *        ces informations doivent être stockées dans la structure principale.
 *
 * Modifications apportées :
 *     1. Ajout du champ `pid_t *pids` à la structure t_shell :
 *         - Sert à stocker les PID des processus enfants exécutés via fork().
 *     2. Ajout du champ `int nb_cmds` à la structure t_shell :
 *         - Permet de savoir combien de processus ont été lancés, afin de boucler correctement avec waitpid().
 *     3. Grâce à ces ajouts, on peut désormais gérer :
 *         - L'attente des processus enfants.
 *         - La détection correcte des signaux (SIGINT, SIGQUIT).
 *         - La mise à jour correcte de $? comme le fait Bash.
 */


 * Changement :
 *     1. Dans exec.c
 *
 * Raison du changement :
 *     1. L'implémentation précédente ne stockait pas les PID des processus enfants,
 *        donc il n'était pas possible d'utiliser correctement waitpid().
 *     2. Cela empêchait de détecter si les processus se terminaient par des signaux comme SIGINT ou SIGQUIT.
 *     3. De plus, la valeur de sortie ($?) ne se mettait pas à jour correctement.
 *     4. Bash attend tous les processus enfants et reflète leur statut dans $?, nous devons donc faire pareil.
 *
 * Modifications apportées :
 *     1. Un tableau shell->pids a été ajouté pour stocker les PID de chaque processus enfant.
 *     2. La logique a été divisée en trois fonctions auxiliaires :
 *         - ft_count_cmds : compte le nombre de commandes à exécuter.
 *         - ft_init_process : effectue le fork() et lance les processus.
 *         - ft_wait_and_set_exit_status : utilise waitpid() pour chaque enfant et met à jour exit_status.
 *     3. La fonction ft_process se contente désormais de coordonner le flux général.
 *         Elle appelle ft_init_process, qui contient la boucle principale.
 *         Ce découpage a été fait pour ne pas dépasser la limite des 25 lignes autorisées.
 *     4. Cette nouvelle structure permet de détecter correctement les interruptions (Ctrl+C, Ctrl+\)
 *         et de mettre à jour $? comme le fait Bash.

