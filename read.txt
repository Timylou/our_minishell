/*
 * Cambio:
 *     1. En structs.h
 *
 * Motivo del cambio:
 *     1. La estructura antigua `t_shell` no contenía los campos necesarios
 *        para gestionar correctamente la ejecución de los procesos hijos.
 *     2. En particular, faltaba un array de PID para los procesos con fork(),
 *        lo que dificultaba el manejo correcto de señales y del estado de salida.
 *     3. Para poder hacer waitpid() a todos los hijos y actualizar $?,
 *        era necesario almacenar esta información en la estructura principal.
 *
 * Cambios realizados:
 *     1. Se añadió el campo `pid_t *pids` a la estructura `t_shell`:
 *         - Sirve para almacenar los PID de los procesos hijos ejecutados mediante fork().
 *     2. Se añadió el campo `int nb_cmds` a la estructura `t_shell`:
 *         - Permite saber cuántos procesos se lanzaron, para hacer correctamente el bucle con waitpid().
 *     3. Gracias a estos cambios ahora se puede:
 *         - Esperar correctamente a todos los procesos hijos.
 *         - Detectar señales como SIGINT y SIGQUIT.
 *         - Actualizar correctamente el valor de $? como lo hace Bash.
 */


 * Cambio:
 *     1. En exec.c
 *
 * Motivo del cambio:
 *     1. La implementación anterior no guardaba los PID de los hijos,
 *        por lo tanto no se podía hacer waitpid() correctamente.
 *     2. Esto impedía detectar si los procesos terminaban por señales como SIGINT o SIGQUIT.
 *     3. Además, el valor de salida ($?) no se actualizaba correctamente.
 *     4. Bash espera a todos los hijos y refleja su estado en $?, por lo tanto debemos hacer lo mismo.
 *
 * Cambios realizados:
 *     1. Se agregó un array shell->pids para almacenar los PID de cada proceso hijo.
 *     2. Separé la lógica en tres funciones auxiliares:
 *         - ft_count_cmds: cuenta los comandos a ejecutar.
 *         - ft_init_process: hace fork() y lanza los procesos.
 *         - ft_wait_and_set_exit_status: hace waitpid() por cada hijo y actualiza exit_status.
 *     3. La función ft_process ahora solo coordina el flujo general.
 *         Llama a ft_init_process, que contiene el bucle principal.
 *         Esto lo hice porque, de lo contrario, la función superaba las 25 líneas permitidas.
 *     4. Esta nueva estructura permite detectar correctamente interrupciones (Ctrl+C, Ctrl+\)
 *         y actualizar $? igual que lo hace Bash.


¡Excelente pregunta! Implementar $? correctamente es una de las partes fundamentales de un shell, ya que conecta la ejecución de los comandos con la lógica del propio shell.

Para implementarlo, necesitas saber y manejar cuatro pilares conceptuales:

El Concepto: ¿Qué es $??
El Almacenamiento: ¿Dónde guardo su valor?
La Actualización: ¿Cuándo y cómo cambio su valor?
La Sustitución (Expansión): ¿Cómo reemplazo el texto $? por su valor?
Pilar 1: El Concepto - ¿Qué es $??
$? es una variable especial que siempre contiene el código de salida (exit status) del último comando ejecutado en primer plano.

Convención:
0 significa éxito. El comando se completó sin errores.
Cualquier valor entre 1 y 255 significa error.
Ejemplos:
ls /: Funciona bien. $? será 0.
ls /ruta/inexistente: Falla. $? será un valor distinto de cero (normalmente 1 o 2).
Un comando interrumpido por Ctrl+C (señal SIGINT): $? será 130.
Pilar 2: El Almacenamiento - ¿Dónde guardo el valor?
Necesitas un lugar en tu estructura principal para mantener este valor entre comandos. La tienes perfectamente ubicada en tu t_shell:

C

// en tu structs.h
typedef struct s_shell
{
    // ...
    int     exit_status; // <-- ESTE ES EL CORAZÓN DE $?
    // ...
}   t_shell;
Esta variable shell->exit_status será la única fuente de verdad para el valor de $? en todo tu programa.

Pilar 3: La Actualización - ¿Cuándo y cómo cambio el valor?
Aquí está la parte más compleja. Debes actualizar shell->exit_status en cada ciclo, dependiendo de lo que haya ocurrido. Hay 3 fuentes principales para este valor:

a) Para Comandos Externos (ls, grep, wc, etc.)
Estos son los comandos que ejecutas con execve en un proceso hijo. El valor de $? se obtiene en el proceso padre después de que el hijo termina, usando waitpid().

Tu función ft_wait_status_child ya lo hace casi a la perfección:

C

// en tu signal.c
void    ft_wait_status_child(t_shell *shell)
{
    // ...
    waitpid(shell->pids[i], &status, 0);

    // Si el hijo fue terminado por una SEÑAL (ej: Ctrl+C)
    if (WIFSIGNALED(status))
    {
        sig = WTERMSIG(status);
        // La convención es 128 + número de la señal. ¡Correcto!
        shell->exit_status = 128 + sig;
    }
    // Si el hijo terminó NORMALMENTE (con exit() o return)
    else if (WIFEXITED(status))
    {
        // WEXITSTATUS nos da el valor que devolvió el hijo (0-255). ¡Correcto!
        shell->exit_status = WEXITSTATUS(status);
    }
    // ...
}
Lo que tienes que saber: Las macros WIFEXITED, WEXITSTATUS, WIFSIGNALED y WTERMSIG (de <sys/wait.h>) son tus herramientas para interrogar el status que te devuelve waitpid. Tu implementación es la correcta.

b) Para Comandos Internos (Builtins como cd, export, echo)
Tus builtins no crean un proceso hijo, por lo que no usas waitpid. La lógica es más simple:

Cada función de tus builtins (ft_cd_builtins, ft_echo_builtins, etc.) debe devolver un int: 0 si tuvo éxito, 1 (u otro número) si falló.
La función que llama al builtin (ft_exec_builtins) debe tomar ese valor devuelto y asignarlo directamente a shell->exit_status.
Tu función ft_exec_builtins también parece hacer esto correctamente:

C

// en tu builtins.c
void    ft_exec_builtins(t_cmd *cmd, t_shell *shell)
{
    if (!ft_strcmp(cmd->args[0], "cd"))
        // El valor que devuelve ft_cd_builtins se guarda directamente. ¡Perfecto!
        shell->exit_status = ft_cd_builtins(cmd, shell);
    // ... y así para los demás ...
}
c) Para Errores del Propio Shell (Parsing, Redirecciones)
Si el usuario escribe algo que es un error de sintaxis (echo < >), o intenta una redirección a un fichero sin permisos, tu shell debe detectar ese error, no ejecutar nada, y actualizar shell->exit_status a un valor de error (como 1, 2 o 258 como hace Bash para errores de sintaxis).

Pilar 4: La Sustitución (Expansión) - ¿Cómo reemplazo $?
Esta es la parte final. Cuando el usuario escribe echo $?, tu parser tiene que detectar $ y reemplazar ? por el valor guardado en shell->exit_status.

Esto debe ocurrir en tu fase de tokenización o expansión, antes de que se construya la estructura del comando (t_cmd).

La lógica sería algo así:

Al tokenizar la línea, si encuentras un $.
Miras el siguiente carácter. Si es un ?.
Ignoras esos dos caracteres ($ y ?).
Lees el valor de shell->exit_status.
Conviertes ese int a una cadena de caracteres (probablemente tienes una función ft_itoa en tu libft).
Insertas esa nueva cadena ("0", "130", etc.) en el token que estás construyendo.
Después de este paso, el comando que llega al ejecutor no es ["echo", "$?"], sino que ya es ["echo", "0"] (o el valor que corresponda).

En Resumen
Guarda el exit_status en tu t_shell.
Actualízalo siempre después de cada comando:
Usa waitpid y las macros W... para comandos externos.
Usa el valor de retorno de tus funciones para los builtins.
Ponlo a 1 (o a otro número > 0) si hay errores de parsing o redirección.
Expande $? a ft_itoa(shell->exit_status) durante la fase de parsing/tokenización.
